@{
    ViewData["Title"] = "POS System";
}

<style>
    .pos-layout {
        height: calc(100vh - 100px);
        background: #f4f6f9;
    }

    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 1rem;
        padding: 1rem;
        height: calc(100vh - 180px);
        overflow-y: auto;
    }

    .product-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s;
        cursor: pointer;
    }

    .product-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .product-card img {
        width: 100%;
        height: 120px;
        object-fit: cover;
        border-radius: 8px 8px 0 0;
    }

    .product-info {
        padding: 0.8rem;
    }

    .product-name {
        font-size: 0.9rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #2d3748;
    }

    .product-price {
        color: #48bb78;
        font-weight: 600;
    }

    .product-stock {
        font-size: 0.8rem;
        color: #718096;
    }

    .cart-section {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .cart-header {
        padding: 1rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .cart-items {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
    }

    .cart-item {
        display: flex;
        align-items: center;
        padding: 0.5rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .cart-item-info {
        flex: 1;
    }

    .cart-item-actions {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .cart-footer {
        padding: 1rem;
        border-top: 1px solid #e2e8f0;
        background: #f8fafc;
    }

    .search-box {
        position: relative;
        margin-bottom: 1rem;
    }

    .search-box input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        outline: none;
    }

    .search-box input:focus {
        border-color: #4299e1;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
    }

    .search-results {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        z-index: 1000;
        max-height: 300px;
        overflow-y: auto;
        display: none;
    }

    .search-results.show {
        display: block;
    }

    .btn-quantity {
        padding: 0.25rem 0.5rem;
        border: none;
        background: #e2e8f0;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-quantity:hover {
        background: #cbd5e0;
    }

    .total-section {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 2px solid #e2e8f0;
    }

    .checkout-btn {
        width: 100%;
        padding: 1rem;
        background: #48bb78;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s;
    }

    .checkout-btn:hover {
        background: #38a169;
    }
</style>

<div class="pos-layout">
    <div class="container-fluid">
        <div class="row h-100">
            <!-- Products Section -->
            <div class="col-lg-8">
                <div class="search-box">
                    <input type="text" id="searchInput" placeholder="Search products by name or SKU..." class="form-control">
                    <div id="searchResults" class="search-results"></div>
                </div>
                <div class="product-grid" id="productGrid">
                    <!-- Products will be loaded here -->
                </div>
            </div>

            <!-- Cart Section -->
            <div class="col-lg-4">
                <div class="cart-section">
                    <div class="cart-header">
                        <h4 class="mb-0">Shopping Cart</h4>
                    </div>
                    <div class="cart-items" id="cartItems">
                        <!-- Cart items will be added here -->
                    </div>
                    <div class="cart-footer">
                        <div class="total-section">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Subtotal:</span>
                                <span id="subtotal">$0.00</span>
                            </div>
                            <div class="d-flex justify-content-between mb-3">
                                <span>Total:</span>
                                <span id="total" class="font-weight-bold">$0.00</span>
                            </div>
                        </div>
                        <button class="checkout-btn" id="checkoutBtn">
                            Proceed to Checkout
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let cart = [];
        const searchInput = document.getElementById('searchInput');
        const searchResults = document.getElementById('searchResults');
        const productGrid = document.getElementById('productGrid');
        const cartItems = document.getElementById('cartItems');
        
        // Debounce function
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Format currency
        function formatCurrency(value) {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(value);
        }

        // Search products
        const searchProducts = debounce(async (query) => {
            if (!query || query.length < 2) {
                searchResults.innerHTML = '';
                searchResults.classList.remove('show');
                return;
            }

            try {
                const response = await fetch(`/POS/POS/SearchProducts?query=${encodeURIComponent(query)}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();
                
                if (result.data && result.data.length > 0) {
                    displaySearchResults(result.data);
                    searchResults.classList.add('show');
                } else {
                    searchResults.innerHTML = '<div class="p-3 text-muted">No products found</div>';
                    searchResults.classList.add('show');
                }
            } catch (error) {
                console.error('Error searching products:', error);
                searchResults.innerHTML = '<div class="p-3 text-danger">An error occurred while searching</div>';
                searchResults.classList.add('show');
            }
        }, 300);

        // Display search results
        function displaySearchResults(products) {
            searchResults.innerHTML = products.map(product => `
                <div class="p-2 border-bottom hover:bg-gray-100 cursor-pointer" onclick="addToCart(${JSON.stringify(product).replace(/"/g, '&quot;')})">
                    <div class="d-flex align-items-center">
                        <img src="${product.thumbnail || '/images/no-image.png'}" alt="${product.name}" 
                             class="mr-2" style="width: 40px; height: 40px; object-fit: cover; border-radius: 4px;">
                        <div class="flex-grow-1">
                            <div class="font-weight-bold">${product.name}</div>
                            <div class="small text-muted">SKU: ${product.sku}</div>
                        </div>
                        <div class="text-right">
                            <div class="text-success font-weight-bold">${formatCurrency(product.price)}</div>
                            <div class="small text-muted">Stock: ${product.stockQuantity}</div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Add to cart
        function addToCart(product) {
            if (!product || !product.id) {
                console.error('Invalid product data:', product);
                return;
            }

            const existingItem = cart.find(item => item.id === product.id);
            
            if (existingItem) {
                if (existingItem.quantity < product.stockQuantity) {
                    existingItem.quantity += 1;
                } else {
                    alert('Insufficient stock quantity!');
                    return;
                }
            } else {
                if (product.stockQuantity > 0) {
                    cart.push({
                        ...product,
                        quantity: 1
                    });
                } else {
                    alert('Product is out of stock!');
                    return;
                }
            }
            
            updateCartDisplay();
            searchResults.classList.remove('show');
            searchInput.value = '';
        }

        // Update cart display
        function updateCartDisplay() {
            cartItems.innerHTML = cart.map(item => `
                <div class="cart-item">
                    <div class="cart-item-info">
                        <div class="font-weight-bold">${item.name}</div>
                        <div class="text-muted small">${formatCurrency(item.price)} x ${item.quantity}</div>
                    </div>
                    <div class="cart-item-actions">
                        <button class="btn-quantity" onclick="updateQuantity('${item.id}', ${item.quantity - 1})"
                                ${item.quantity <= 1 ? 'disabled' : ''}>-</button>
                        <span class="mx-2">${item.quantity}</span>
                        <button class="btn-quantity" onclick="updateQuantity('${item.id}', ${item.quantity + 1})"
                                ${item.quantity >= item.stockQuantity ? 'disabled' : ''}>+</button>
                        <button class="btn btn-sm btn-danger ml-2" onclick="removeFromCart('${item.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `).join('');

            updateTotals();
        }

        // Update quantity
        function updateQuantity(productId, newQuantity) {
            const item = cart.find(item => item.id === productId);
            if (!item) return;

            if (newQuantity < 1) {
                removeFromCart(productId);
                return;
            }

            if (newQuantity > item.stockQuantity) {
                alert('Insufficient stock quantity!');
                return;
            }

            item.quantity = newQuantity;
            updateCartDisplay();
        }

        // Remove from cart
        function removeFromCart(productId) {
            cart = cart.filter(item => item.id !== productId);
            updateCartDisplay();
        }

        // Update totals
        function updateTotals() {
            const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            document.getElementById('subtotal').textContent = formatCurrency(subtotal);
            document.getElementById('total').textContent = formatCurrency(subtotal);
        }

        // Event listeners
        searchInput.addEventListener('input', (e) => searchProducts(e.target.value));
        
        // Close search results when clicking outside
        document.addEventListener('click', (e) => {
            if (!searchResults.contains(e.target) && e.target !== searchInput) {
                searchResults.classList.remove('show');
            }
        });

        // Checkout handler
        document.getElementById('checkoutBtn').addEventListener('click', () => {
            if (cart.length === 0) {
                alert('Please add items to cart before checkout!');
                return;
            }
            // Implement checkout logic here
            console.log('Checking out with items:', cart);
        });
    </script>
}