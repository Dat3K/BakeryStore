@{
    ViewData["Title"] = "POS System";
}

<div class="container-fluid">
    <div class="row">
        <!-- Left side - Product Search and Cart -->
        <div class="col-md-8">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <div class="input-group mb-3">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search products...">
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                        </div>
                    </div>
                    <div id="searchResults" class="search-results border rounded"></div>
                </div>
            </div>

            <!-- Product List -->
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="card-title mb-0">Order Items</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th style="width: 40%">Product</th>
                                    <th style="width: 10%">SKU</th>
                                    <th class="text-end" style="width: 15%">Price</th>
                                    <th class="text-center" style="width: 15%">Quantity</th>
                                    <th class="text-end" style="width: 12%">Subtotal</th>
                                    <th class="text-center" style="width: 8%">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="orderItems">
                                <!-- Order items will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right side - Order Summary -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="card-title mb-0">Order Summary</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <span id="subtotal">$0.00</span>
                    </div>
                    <div class="d-flex justify-content-between mb-3">
                        <span class="font-weight-bold">Total:</span>
                        <span id="total" class="font-weight-bold">$0.00</span>
                    </div>
                    <button id="checkoutBtn" class="btn btn-primary btn-block w-100">
                        <i class="fas fa-shopping-cart mr-2"></i> Checkout
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let cart = [];
        const searchInput = document.getElementById('searchInput');
        const searchResults = document.getElementById('searchResults');
        const orderItems = document.getElementById('orderItems');

        // Load current order on page load
        $(document).ready(function() {
            loadCurrentOrder();
        });

        // Load current order
        function loadCurrentOrder() {
            $.ajax({
                url: '/POS/POS/GetCurrentOrder',
                method: 'GET',
                success: function(result) {
                    if (result.success && result.data) {
                        cart = result.data.items.map(item => ({
                            id: item.productId,
                            name: item.productName,
                            sku: item.sku,
                            price: item.unitPrice,
                            quantity: item.quantity,
                            stockQuantity: item.stockQuantity,
                            subtotal: item.subtotal,
                            thumbnail: item.thumbnail
                        }));
                        updateCartDisplay();
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading order:', error);
                }
            });
        }

        // Update cart display
        function updateCartDisplay() {
            orderItems.innerHTML = cart.map(item => `
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${item.thumbnail || '/images/no-image.png'}" 
                                 alt="${item.name}"
                                 class="product-thumbnail rounded me-2"
                                 style="width: 40px; height: 40px; object-fit: cover;">
                            <div class="product-name">${item.name}</div>
                        </div>
                    </td>
                    <td>${item.sku}</td>
                    <td class="text-end">${formatCurrency(item.price)}</td>
                    <td class="text-center">
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-secondary" onclick="updateQuantity('${item.id}', ${item.quantity - 1})"
                                    ${item.quantity <= 1 ? 'disabled' : ''}>
                                <i class="fas fa-minus"></i>
                            </button>
                            <span class="btn btn-outline-secondary disabled">
                                ${item.quantity}
                            </span>
                            <button class="btn btn-outline-secondary" onclick="updateQuantity('${item.id}', ${item.quantity + 1})"
                                    ${item.quantity >= item.stockQuantity ? 'disabled' : ''}>
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </td>
                    <td class="text-end">${formatCurrency(item.subtotal)}</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-danger" onclick="removeFromCart('${item.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('') || '<tr><td colspan="6" class="text-center">No items in cart</td></tr>';

            updateTotals();
        }

        // Format currency
        function formatCurrency(value) {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(value);
        }

        // Search products
        const searchProducts = debounce((query) => {
            if (!query || query.length < 2) {
                searchResults.innerHTML = '';
                searchResults.classList.remove('show');
                return;
            }

            $.ajax({
                url: `/POS/POS/SearchProducts?query=${encodeURIComponent(query)}`,
                method: 'GET',
                success: function(result) {
                    if (result.data && result.data.length > 0) {
                        displaySearchResults(result.data);
                        searchResults.classList.add('show');
                    } else {
                        searchResults.innerHTML = '<div class="p-3 text-muted">No products found</div>';
                        searchResults.classList.add('show');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error searching products:', error);
                    searchResults.innerHTML = '<div class="p-3 text-danger">An error occurred while searching</div>';
                    searchResults.classList.add('show');
                }
            });
        }, 300);

        // Debounce function
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Display search results
        function displaySearchResults(products) {
            searchResults.innerHTML = products.map(product => `
                <div class="p-2 border-bottom hover:bg-gray-100 cursor-pointer" onclick="addToCart(${JSON.stringify(product).replace(/"/g, '&quot;')})">
                    <div class="d-flex align-items-center">
                        <div class="product-img-container me-3">
                            <img src="${product.thumbnail || '/images/no-image.png'}" 
                                 alt="${product.name}"
                                 class="product-thumbnail rounded"
                                 style="width: 50px; height: 50px; object-fit: cover;">
                        </div>
                        <div class="flex-grow-1">
                            <div class="font-weight-bold">${product.name}</div>
                            <div class="text-muted small">SKU: ${product.sku}</div>
                        </div>
                        <div class="text-end">
                            <div class="text-success">${formatCurrency(product.price)}</div>
                            <div class="text-muted small">Stock: ${product.stockQuantity}</div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Add to cart
        function addToCart(product) {
            $.ajax({
                url: '/POS/POS/AddToCart',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    productId: product.id,
                    quantity: 1
                }),
                success: function(result) {
                    if (result.success) {
                        loadCurrentOrder();
                        searchInput.value = '';
                        searchResults.innerHTML = '';
                        searchResults.classList.remove('show');
                    } else {
                        alert(result.message || 'Error adding item to cart');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error adding to cart:', error);
                    alert('Error adding item to cart');
                }
            });
        }

        // Update quantity
        function updateQuantity(productId, newQuantity) {
            if (newQuantity < 1) return;
            
            const item = cart.find(item => item.id === productId);
            if (!item) return;

            if (newQuantity > item.stockQuantity) {
                alert('Cannot exceed available stock quantity!');
                return;
            }

            $.ajax({
                url: '/POS/POS/UpdateCartItemQuantity',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    productId: productId,
                    quantity: newQuantity
                }),
                success: function(result) {
                    if (result.success) {
                        loadCurrentOrder();
                    } else {
                        alert(result.message || 'Error updating quantity');
                        loadCurrentOrder(); // Reload to sync with server state
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error updating quantity:', error);
                    alert('Error updating quantity');
                    loadCurrentOrder(); // Reload to sync with server state
                }
            });
        }

        // Remove from cart
        function removeFromCart(productId) {
            if (!confirm('Are you sure you want to remove this item?')) {
                return;
            }

            $.ajax({
                url: '/POS/POS/RemoveFromCart',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    productId: productId
                }),
                success: function(result) {
                    if (result.success) {
                        loadCurrentOrder();
                    } else {
                        alert(result.message || 'Error removing item from cart');
                        loadCurrentOrder(); // Reload to sync with server state
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error removing from cart:', error);
                    alert('Error removing item from cart');
                    loadCurrentOrder(); // Reload to sync with server state
                }
            });
        }

        // Update totals
        function updateTotals() {
            const subtotal = cart.reduce((sum, item) => sum + item.subtotal, 0);
            document.getElementById('subtotal').textContent = formatCurrency(subtotal);
            document.getElementById('total').textContent = formatCurrency(subtotal);
        }

        // Handle search input
        searchInput.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            searchProducts(query);
        });

        // Handle checkout
        document.getElementById('checkoutBtn').addEventListener('click', function() {
            if (cart.length === 0) {
                alert('Cart is empty');
                return;
            }

            $.ajax({
                url: '/POS/POS/Checkout',
                method: 'POST',
                success: function(result) {
                    if (result.success) {
                        alert('Order placed successfully!');
                        loadCurrentOrder();
                    } else {
                        alert(result.message || 'Error during checkout');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error during checkout:', error);
                    alert('Error during checkout');
                }
            });
        });

        // Close search results when clicking outside
        document.addEventListener('click', function(e) {
            if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
                searchResults.classList.remove('show');
            }
        });

        // Add some CSS for the product images
        const style = document.createElement('style');
        style.textContent = `
            .product-thumbnail {
                border: 1px solid #dee2e6;
                background-color: #fff;
                transition: transform 0.2s;
            }
            .product-thumbnail:hover {
                transform: scale(1.05);
            }
            .search-results {
                max-height: 400px;
                overflow-y: auto;
            }
            .search-results > div:hover {
                background-color: #f8f9fa;
                cursor: pointer;
            }
            .table td {
                vertical-align: middle;
            }
            .table td:nth-child(2) { /* SKU column */
                font-size: 0.875rem;
                color: #6c757d;
            }
            .product-name {
                font-weight: 500;
                margin-bottom: 0;
            }
        `;
        document.head.appendChild(style);
    </script>
}