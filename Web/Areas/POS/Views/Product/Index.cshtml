@model IEnumerable<Web.Models.Product>
@{
    ViewData["Title"] = "Product List";
}

<style>
    th,
    td {
        border: 1px solid #ccc;
        padding: 10px;
        text-align: right;
    }

    #addProductImagePreview {
        width: 200px;
        height: 200px;
        margin-top: 10px;
    }

    #productImage {
        width: 200px;
        height: 200px;
        margin-top: 10px;
    }

    th {
        background-color: #f2f2f2;
    }

    table.dataTable th.dt-type-numeric,
    table.dataTable th.dt-type-date,
    table.dataTable td.dt-type-numeric,
    table.dataTable td.dt-type-date {
        text-align: center;
    }

    #addProductImagePreview {
        width: 200px;
        height: 200px;
        margin-top: 10px;
    }

    /* Modern DataTable Styling */
    .data-table {
        border-collapse: separate;
        border-spacing: 0;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .data-table thead th {
        background-color: #f8f9fa;
        color: #495057;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.85rem;
        padding: 15px;
        border-bottom: 2px solid #dee2e6;
        white-space: nowrap;
    }

    .data-table tbody tr {
        transition: all 0.3s ease;
    }

    .data-table tbody tr:hover {
        background-color: #f8f9fa;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .data-table td {
        padding: 12px 15px;
        vertical-align: middle;
        border-bottom: 1px solid #dee2e6;
        color: #495057;
    }

    /* Status badges */
    .badge {
        padding: 5px 12px;
        border-radius: 15px;
        font-weight: 500;
        font-size: 12px;
        transition: all 0.3s ease;
    }

    .badge:hover {
        transform: translateY(-1px);
    }

    /* DataTable controls styling */
    .dataTables_wrapper .dataTables_length select {
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 4px 24px 4px 8px;
        margin: 0 8px;
    }

    .dataTables_wrapper .dataTables_filter input {
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 6px 12px;
        margin-left: 8px;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button {
        border-radius: 4px;
        padding: 6px 12px;
        margin: 0 2px;
        border: none;
        background: #f8f9fa;
        color: #495057 !important;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        background: #e9ecef !important;
        border: none;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
        background: #0d6efd !important;
        color: white !important;
        border: none;
    }

    .dataTables_wrapper .dataTables_info {
        color: #6c757d;
        padding-top: 16px;
    }

    /* Product image styling */
    .product-image {
        width: 50px;
        height: 50px;
        border-radius: 8px;
        object-fit: cover;
    }

    /* Action buttons */
    .list-action {
        gap: 8px;
    }

    .list-action .badge {
        cursor: pointer;
        border: none;
        padding: 8px;
        height: 32px;
        width: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .list-action .badge i {
        font-size: 14px;
    }

    /* Price columns */
    .price-column {
        font-weight: 500;
        color: #198754;
    }

    /* Stock quantity */
    .stock-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .stock-low {
        background-color: #fff3cd;
        color: #856404;
    }

    .stock-good {
        background-color: #d4edda;
        color: #155724;
    }
</style>

<div class='container-fluid'>
    <div class='row'>
        <div class='col-lg-12'>
            <div class='d-flex flex-wrap flex-wrap align-items-center justify-content-between mb-4'>
                <div>
                    <h4 class='mb-3'>Product List</h4>
                </div>
                <button id="addProductButton" class='btn btn-primary add-list flex-shrink-0'>
                    <i class='las la-plus mr-3'></i>
                    Add Product
                </button>
            </div>
        </div>
        <!-- Add Product Section -->
        <div id="addProductSection" style="display: none;" class='container-fluid add-form-list'>
            <div class='row'>
                <div class='col-sm-6'>
                    <div class='card'>
                        <div class='card-header d-flex justify-content-between'>
                            <div class='header-title'>
                                <h4 class='card-title'>Add Product</h4>
                            </div>
                        </div>
                        <div class='card-body'>
                            <form id='addProductForm'>
                                <div class='row'>
                                    <div class='col-md-12'>
                                        <div class='form-group'>
                                            <label>Name *</label>
                                            <input type='text' id='productName' class='form-control' name='name'
                                                placeholder='Enter Name' data-errors='Please Enter Name.' required />
                                            <div class='help-block with-errors'></div>
                                        </div>
                                    </div>
                                    <div class='col-md-6'>
                                        <div class='form-group'>
                                            <label>Cost Price *</label>
                                            <input type='text' id='productCostPrice' class='form-control currency-input'
                                                name='costPrice' placeholder='Enter Cost Price' data-errors='Please Enter Cost.'
                                                required />
                                            <div class='help-block with-errors'></div>
                                        </div>
                                    </div>
                                    <div class='col-md-6'>
                                        <div class='form-group'>
                                            <label>Price *</label>
                                            <input type='text' id='productPrice' name='price'
                                                class='form-control currency-input' placeholder='Enter Price'
                                                data-errors='Please Enter Price.' required />
                                            <div class='help-block with-errors'></div>
                                        </div>
                                    </div>
                                    <div class='col-md-6'>
                                        <div class='form-group'>
                                            <label>Category *</label>
                                            <select id='productCategoryAdd' name='categoryId' class='custom-select'
                                                data-style='py-0' required>
                                            </select>
                                        </div>
                                    </div>
                                    <div class='col-md-6'>
                                        <div class='form-group'>
                                            <label>Quantity *</label>
                                            <input type='text' id='productQuantity' name='stockQuantity' class='form-control'
                                                placeholder='Enter Quantity' required />
                                            <div class='help-block with-errors'></div>
                                        </div>
                                    </div>
                                    <div class='col-md-12'>
                                        <div class='form-group'>
                                            <label>Image</label>
                                            <input type='file' class='form-control image-file' id='addProductImage' name='image'
                                                accept='image/*' required />
                                            <div class='image-preview'>
                                                <img class="d-none" alt='Product Image' id='addProductImagePreview' />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <button type='submit' class='btn btn-primary mr-2' id="addProductBtn">
                                    Add Product
                                </button>
                                <button id="resetAddProduct" type='reset' class='btn btn-danger'>Reset</button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class='card'>
                        <div class='card-header d-flex justify-content-between'>
                            <div class='header-title'>
                                <h4 class='card-title'>Category Management</h4>
                            </div>
                        </div>
                        <div class='card-body'>
                            <div class="mb-4">
                                <button id="showAddCategoryBtn" class="btn btn-primary mb-3">Add New Category</button>
                                <form id='addCategoryForm' style="display: none;">
                                    <div class='row'>
                                        <div class='col-md-8'>
                                            <div class='form-group'>
                                                <label>Category Name *</label>
                                                <input type='text' class='form-control' name='name' required />
                                            </div>
                                        </div>
                                        <div class='col-md-4'>
                                            <div class='form-group'>
                                                <label>&nbsp;</label>
                                                <div>
                                                    <button type='submit' class='btn btn-primary'>Save</button>
                                                    <button type='button' class='btn btn-secondary' id="cancelAddCategory">Cancel</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>

                            <div class="form-group">
                                <label>Select Category</label>
                                <div class="d-flex">
                                    <select id='categorySelect' class='custom-select'>
                                        <option value="">Select Category</option>
                                    </select>
                                    <button class="btn btn-warning ml-2" id="editCategoryBtn" style="display: none;">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-danger ml-2" id="deleteCategoryBtn" style="display: none;">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>

                            <form id='editCategoryForm' style="display: none;">
                                <div class='form-group'>
                                    <label>Edit Category Name *</label>
                                    <input type='text' class='form-control' name='name' required />
                                    <div class="mt-2">
                                        <button type='submit' class='btn btn-primary'>Save</button>
                                        <button type='button' class='btn btn-secondary' id="cancelEditCategory">Cancel</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Page end  -->
        </div>
        <div class='col-lg-12'>
            <div class='table-responsive rounded mb-3'>
                <table id="productsTable" class='data-table table mb-0 tbl-server-info'>
                    <thead class='bg-white text-uppercase'>
                        <tr class='ligth ligth-data'>
                            <th>Sku</th>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Retail Price</th>
                            <th>Import Price</th>
                            <th>Quantity</th>
                            <th>Create At</th>
                            <th>Updated At</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
    <!-- Page end  -->
</div>
<!-- Modal Edit -->
<div class='modal fade' id='edit-note' tabindex='-1' role='dialog' aria-hidden='true'>
    <div class='modal-dialog modal-dialog-centered' role='document'>
        <div class='modal-content'>
            <div class='modal-body'>
                <div class='popup text-left'>
                    <div class='media align-items-top justify-content-between'>
                        <h3 class='mb-3'>Edit Product</h3>
                        <div class='btn-cancel p-0' data-dismiss='modal'>
                            <i class='las la-times'></i>
                        </div>
                    </div>
                    <div class='content edit-notes'>
                        <div class='card card-transparent card-block card-stretch event-note mb-0'>
                            <form id='editProductForm'>
                                <div class='card-body px-0 bukmark'>
                                    <!-- ID sản phẩm (ẩn) -->
                                    <input type='hidden' id='productId' name='id' />
                                    <!-- Tên sản phẩm -->
                                    <div class='form-group'>
                                        <label for='productName'>Product Name</label>
                                        <input name="name" type='text' id='productName' class='form-control'
                                            placeholder='Enter product name' required />
                                    </div>
                                    <!-- Mã vạch -->
                                    <div class='form-group'>
                                        <label for='productSku'>Sku</label>
                                        <input disabled type='text' id='productSku' class='form-control'
                                            placeholder='Enter product sku' />
                                    </div>
                                    <!-- Ảnh sản phẩm -->
                                    <div class='form-group'>
                                        <label for='productImage'>Product Image</label>
                                        <input type='file' id='imageInput' accept='image/*' name="image" />
                                        <img class="mx-auto" id='productImage' alt='Hình ảnh đã tải lên' />
                                    </div>
                                    <!-- Danh mục -->
                                    <div class='form-group'>
                                        <label for='productCategory'>Category</label>
                                        <select name="categoryId" class="custom-select" id="productCategory" required>
                                        </select>
                                    </div>
                                    <!-- Giá bán -->
                                    <div class='form-group'>
                                        <label for='productPrice'>Price</label>
                                        <div class='input-group'>
                                            <input name="price" type='text' id='productPrice'
                                                class='form-control currency-input'
                                                placeholder='Enter product price'
                                                required />
                                        </div>
                                    </div>
                                    <!-- Giá nhập -->
                                    <div class='form-group'>
                                        <label for='productCostPrice'>Cost Price</label>
                                        <div class='input-group'>
                                            <input name="costPrice" type='text' id='productCostPrice'
                                                class='form-control currency-input'
                                                placeholder='Enter product cost price'
                                                required />
                                        </div>
                                    </div>
                                    <!-- Số lượng -->
                                    <div class='form-group'>
                                        <label for='productQuantity'>Quantity</label>
                                        <input name="stockQuantity" type='number' id='productQuantity'
                                            class='form-control' placeholder='Enter product quantity' required />
                                    </div>

                                </div>
                                <div class='card-footer border-0'>
                                    <div class='d-flex flex-wrap align-items-center justify-content-end'>
                                        <button type='button' class='btn btn-secondary mr-3' data-dismiss='modal'>
                                            Cancel
                                        </button>
                                        <button type='submit' class='btn btn-primary' id='saveProductChanges'>
                                            Save Changes
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
  <script>
      /*--------------------------------------------------------------------- 
          DataTable 
          -----------------------------------------------------------------------*/
      $('#productsTable').DataTable({
          processing: true,
          serverSide: false,
          order: [[7, "desc"]],
          lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
          columnDefs: [
              { className: 'dt-center', targets: '_all' },
              { type: 'date', targets: [6,7] },
              { className: 'price-column', targets: [3,4] }
          ],
          dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
               '<"row"<"col-sm-12"tr>>' +
               '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
          language: {
              search: "_INPUT_",
              searchPlaceholder: "Search products...",
              lengthMenu: "_MENU_ products per page",
              info: "Showing _START_ to _END_ of _TOTAL_ products",
              infoEmpty: "No products found",
              infoFiltered: "(filtered from _MAX_ total products)",
              paginate: {
                  first: '<i class="fas fa-angle-double-left"></i>',
                  previous: '<i class="fas fa-angle-left"></i>',
                  next: '<i class="fas fa-angle-right"></i>',
                  last: '<i class="fas fa-angle-double-right"></i>'
              }
          },
          ajax: {
              url: '/POS/Product/GetAllProducts',
              type: 'GET',
              dataSrc: 'data'
          },
          columns: [
              {
                  data: null,
                  render: function (data) {
                      return `<span class="fw-bold text-truncate w-100" title="${data.Sku}">${data.Sku}</span>`
                  }
              },
              {
                  data: null,
                  render: function (data) {
                      return `<div class='d-flex align-items-center'>
                          <img src="${data.Thumbnail}" class='product-image mr-3' alt='${data.Name}' />
                          <div>
                              <p class='mb-0 font-weight-medium'>${data.Name}</p>
                              <small class='text-muted text-truncate'>${data.Description}</small>
                          </div>
                      </div>`
                  }
              },
              { 
                  data: 'Category.Name',
                  render: function(data) {
                      return `<span class="badge bg-info">${data}</span>`
                  }
              },
              {
                  data: 'Price',
                  render: function (data) {
                      return `<span class="fw-bold">${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data)}</span>`
                  }
              },
              {
                  data: 'CostPrice',
                  render: function (data) {
                      return `<span class="fw-bold">${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data)}</span>`
                  }
              },
              {
                  data: 'StockQuantity',
                  render: function(data) {
                      const badgeClass = data < 10 ? 'stock-low' : 'stock-good';
                      return `<span class="stock-badge ${badgeClass}">${data}</span>`
                  }
              },
              { 
                  data: 'CreatedAt',
                  render: function (data) {
                      const date = new Date(data);
                      return `<div>
                          <div>${date.toLocaleDateString('en-GB')}</div>
                          <small class="text-muted">${date.toLocaleTimeString('en-GB')}</small>
                      </div>`
                  }
              },
              { 
                  data: 'UpdatedAt',
                  render: function (data) {
                      const date = new Date(data);
                      return `<div>
                          <div>${date.toLocaleDateString('en-GB')}</div>
                          <small class="text-muted">${date.toLocaleTimeString('en-GB')}</small>
                      </div>`
                  }
              },
              {
                  data: 'Id',
                  sortable: false,
                  render: function (data, type, row) {
                      return `<div class='d-flex align-items-center justify-content-center list-action'>
                          <button class='badge bg-success edit-product' data-toggle='modal' data-placement='top'
                              data-target='#edit-note' title='Edit' data-original-title='Edit'
                              data-id='${data}' data-name='${row.Name}' data-sku='${row.Sku}'
                              data-thumbnail='${row.Thumbnail}' data-categoryid='${row.CategoryId}'
                              data-price='${row.Price}' data-cost-price='${row.CostPrice}'
                              data-quantity='${row.StockQuantity}'>
                              <i class='ri-pencil-line'></i>
                          </button>
                          <button class='badge bg-danger delete-product' data-name='${row.Name}' data-id='${data}'>
                              <i class='ri-delete-bin-line'></i>
                          </button>
                      </div>`
                  }
              }
          ]
      });

      const loadCategories = () => $.ajax({
          url: '/POS/Product/GetAllCategories',
          method: 'GET',
          success: function (response) {
              const categorySelectModal = $('#productCategory')
              const productCategoryAdd = $('#productCategoryAdd')
              const productSelect = $('#categorySelect')
              categorySelectModal.empty()
              productCategoryAdd.empty()
              productSelect.empty()
              productSelect.append(`<option value="">Select category</option>`)
              response.forEach(category => {
                  categorySelectModal.append(`<option value="${category.Id}">${category.Name}</option>`)
                  productCategoryAdd.append(`<option value="${category.Id}">${category.Name}</option>`)
                  productSelect.append(`<option value="${category.Id}">${category.Name}</option>`)
              })
          },
          error: function (error) {
              console.log(error)
          }
      })

      loadCategories()

      $('#addProductButton').on('click', function() {
          $('#addProductSection').slideDown();
          // Initialize currency inputs for add form
          initializeCurrencyInputs();
      });

      $('#resetAddProduct').on('click', function() {
          $('#addProductForm')[0].reset();
          $('#addProductImagePreview').addClass('d-none');
          // Reinitialize currency inputs after reset
          initializeCurrencyInputs();
      });

      /*--------------------------------------------------------------------- 
          show-images 
          -----------------------------------------------------------------------*/
      $(document).on('change', '#imageInput', function (event) {
          const file = event.target.files[0] // Lấy file đầu tiên từ danh sách
          if (file) {
              const reader = new FileReader()
              reader.onload = function (e) {
                  const imagePreview = $('#productImage')
                  imagePreview.attr('src', e.target.result) // Thiết lập src của hình ảnh
                  imagePreview.show() // Hiển thị hình ảnh
                  imagePreviewUpdate = e.target.result
              }
              reader.readAsDataURL(file) // Đọc file dướidạng URL
          }
      })

      $(document).on('change', '#addProductImage', function (event) {
          const file = event.target.files[0] // Lấy file đầu tiên từ danh sách
          if (file) {
              const reader = new FileReader()
              reader.onload = function (e) {
                  const imagePreview = $('#addProductImagePreview')
                  imagePreview.attr('src', e.target.result) // Thiết lập src của hình ảnh
                  imagePreview.show() // Hiển thị hình ảnh
              }
              reader.readAsDataURL(file) // Đọc file dướidạng URL
          }
          $('#addProductImagePreview').removeClass('d-none')
      })


      /*--------------------------------------------------------------------- 
          add product and upload image to server 
          -----------------------------------------------------------------------*/
      $('#addProductForm').on('submit', function(e) {
          e.preventDefault();
          const formData = new FormData(this);

          // Parse currency values before sending
          const price = parseCurrency(formData.get('price'));
          const costPrice = parseCurrency(formData.get('costPrice'));
          
          formData.set('price', price);
          formData.set('costPrice', costPrice);

          $.ajax({
              url: '/POS/Product/AddProduct',
              type: 'POST',
              data: formData,
              processData: false,
              contentType: false,
              success: function(response) {
                  if (response.success) {
                      $('#addProductSection').slideUp();
                      $('#productsTable').DataTable().ajax.reload();
                      $('#addProductForm')[0].reset();
                      $('#addProductImagePreview').addClass('d-none');
                      
                      Swal.fire({
                          icon: 'success',
                          title: 'Success',
                          text: response.message
                      });
                  } else {
                      Swal.fire({
                          icon: 'error',
                          title: 'Error',
                          text: response.message
                      });
                  }
              },
              error: function(xhr, status, error) {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: 'An error occurred while adding the product.'
                  });
              }
          });
      });

      $(document).on('click', '.delete-product', function () {
          const id = $(this).data('id');
          const name = $(this).data('name');

          Swal.fire({
              title: 'Are you sure?',
              text: `Do you want to delete product "${name}"?`,
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#d33',
              cancelButtonColor: '#3085d6',
              confirmButtonText: 'Yes, delete it!'
          }).then((result) => {
              if (result.isConfirmed) {
                  $.ajax({
                      url: `/POS/Product/DeleteProduct/${id}`,
                      type: 'DELETE',
                      success: function(response) {
                          if (response.success) {
                            Swal.fire(
                                'Deleted!',
                                response.message,
                                'success'
                            );
                            $('#productsTable').DataTable().ajax.reload();
                          } else {
                              Swal.fire(
                                  'Error!',
                                  response.message,
                                  'error'
                              );
                          }
                      },
                      error: function(xhr, status, error) {
                          Swal.fire(
                              'Error!',
                              'Failed to delete product. Please try again.',
                              'error'
                          );
                      }
                  });
              }
          });
      });

      // Show/Hide Add Category Form
      $('#showAddCategoryBtn').click(function() {
          $('#addCategoryForm').slideDown();
          $(this).hide();
      });

      $('#cancelAddCategory').click(function() {
          $('#addCategoryForm').slideUp();
          $('#showAddCategoryBtn').show();
          $('#addCategoryForm')[0].reset();
      });

      // Add Category
      $('#addCategoryForm').on('submit', function(e) {
          e.preventDefault();
          const formData = new FormData(this);
          const categoryData = Object.fromEntries(formData.entries());

          $.ajax({
              url: '/categories',
              method: 'POST',
              contentType: 'application/json',
              data: JSON.stringify(categoryData),
              success: function(response) {
                  Toastify({
                      text: 'Category added successfully',
                      backgroundColor: 'green',
                      delay: 3000,
                      position: 'center'
                  }).showToast();
                  loadCategories();
                  $('#addCategoryForm')[0].reset();
                  $('#addCategoryForm').slideUp();
                  $('#showAddCategoryBtn').show();
              },
              error: function(err) {
                  Toastify({
                      text: err.responseJSON?.message || 'Failed to add category',
                      backgroundColor: 'red',
                      delay: 3000,
                      position: 'center'
                  }).showToast();
              }
          });
      });

      // Handle category selection
      $('#categorySelect').change(function() {
          const selectedId = $(this).val();
          const selectedName = $(this).find('option:selected').data('name');
          
          if (selectedId) {
              $('#editCategoryBtn, #deleteCategoryBtn').show();
              $('#editCategoryForm input[name="name"]').val(selectedName);
          } else {
              $('#editCategoryBtn, #deleteCategoryBtn').hide();
              $('#editCategoryForm').hide();
          }
      });

      // Show/Hide Edit Form
      $('#editCategoryBtn').click(function() {
          $('#editCategoryForm').slideDown();
      });

      $('#cancelEditCategory').click(function() {
          $('#editCategoryForm').slideUp();
      });

      // Edit Category
      $('#editCategoryForm').on('submit', function(e) {
          e.preventDefault();
          const categoryId = $('#categorySelect').val();
          const formData = new FormData(this);
          const categoryData = Object.fromEntries(formData.entries());

          $.ajax({
              url: `/categories/${categoryId}`,
              method: 'PUT',
              contentType: 'application/json',
              data: JSON.stringify(categoryData),
              success: function(response) {
                  Toastify({
                      text: 'Category updated successfully',
                      backgroundColor: 'green',
                      delay: 3000,
                      position: 'center'
                  }).showToast();
                  loadCategories();
                  $('#editCategoryForm').slideUp();
              },
              error: function(err) {
                  Toastify({
                      text: err.responseJSON?.message || 'Failed to update category',
                      backgroundColor: 'red',
                      delay: 3000,
                      position: 'center'
                  }).showToast();
              }
          });
      });

      // Delete Category
      $('#deleteCategoryBtn').click(function() {
          const categoryId = $('#categorySelect').val();
          const categoryName = $('#categorySelect option:selected').text();

          Swal.fire({
              title: `Delete Category "${categoryName}"?`,
              text: "You won't be able to revert this!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#d33',
              cancelButtonColor: '#3085d6',
              confirmButtonText: 'Yes, delete it!'
          }).then((result) => {
              if (result.isConfirmed) {
                  $.ajax({
                      url: `/categories/${categoryId}`,
                      method: 'DELETE',
                      success: function() {
                          Toastify({
                              text: 'Category deleted successfully',
                              backgroundColor: 'green',
                              delay: 3000,
                              position: 'center'
                          }).showToast();
                          loadCategories();
                          $('#editCategoryForm').hide();
                          $('#editCategoryBtn, #deleteCategoryBtn').hide();
                      },
                      error: function(err) {
                          Toastify({
                              text: err.responseJSON?.message || 'Failed to delete category',
                              backgroundColor: 'red',
                              delay: 3000,
                              position: 'center'
                          }).showToast();
                      }
                  });
              }
          });
      });

      const currencyFormatter = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          minimumFractionDigits: 0,
          maximumFractionDigits: 20
      });

      // Format number to USD currency
      function formatCurrency(amount) {
          if (!amount) return '';
          // Handle string numbers
          if (typeof amount === 'string') {
              amount = parseFloat(amount);
          }
          return currencyFormatter.format(amount);
      }

      // Parse currency string to number
      function parseCurrency(value) {
          if (!value) return 0;
          // Remove currency symbol and thousand separators, keep decimal point
          return parseFloat(value.replace(/[^0-9.-]/g, '')) || 0;
      }

      // Format input as currency while typing
      function formatCurrencyInput(input) {
          const cursorPosition = input.selectionStart;
          let value = input.value;

          // Remove currency symbol and thousand separators, keep decimal point
          value = value.replace(/[^0-9.]/g, '');

          // Handle multiple decimal points
          const parts = value.split('.');
          if (parts.length > 2) {
              value = parts[0] + '.' + parts.slice(1).join('');
          }

          // Only format if we have a valid number
          if (value && !isNaN(parseFloat(value))) {
              const formattedValue = formatCurrency(value);
              input.value = formattedValue;

              // Adjust cursor position based on formatting changes
              const newPosition = cursorPosition + 
                  (formattedValue.length - value.length) + 
                  (value.includes('.') ? 0 : 1);
              input.setSelectionRange(newPosition, newPosition);
          } else {
              input.value = value;
          }
      }

      // Initialize currency inputs
      function initializeCurrencyInputs() {
          const currencyInputs = document.querySelectorAll('.currency-input');
          currencyInputs.forEach(input => {
              // Initial formatting
              if (input.value) {
                  formatCurrencyInput(input);
              }

              // Handle input events
              input.addEventListener('input', (e) => {
                  const value = e.target.value;
                  // Allow typing decimal point
                  if (value === '.' || value.endsWith('.')) {
                      e.target.value = value;
                      return;
                  }
                  formatCurrencyInput(e.target);
              });

              // Handle focus
              input.addEventListener('focus', (e) => {
                  const value = parseCurrency(e.target.value);
                  // Show plain number without currency formatting when focused
                  e.target.value = value ? value.toString() : '';
              });

              // Handle blur
              input.addEventListener('blur', (e) => {
                  const value = e.target.value;
                  if (value) {
                      const numericValue = parseFloat(value);
                      if (!isNaN(numericValue)) {
                          e.target.value = formatCurrency(numericValue);
                      }
                  } else {
                      e.target.value = '';
                  }
              });

              // Handle keydown
              input.addEventListener('keydown', (e) => {
                  // Allow: backspace, delete, tab, escape, enter, decimal point, period
                  if ([46, 8, 9, 27, 13, 110, 190].includes(e.keyCode) ||
                      // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                      (([65, 67, 86, 88].includes(e.keyCode)) && e.ctrlKey) ||
                      // Allow: home, end, left, right
                      (e.keyCode >= 35 && e.keyCode <= 39) ||
                      // Allow: numbers and number pad
                      ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
                      return;
                  }
                  e.preventDefault();
              });
          });
      }

      // Initialize currency inputs on document ready
      $(document).ready(function() {
          initializeCurrencyInputs();
      });

      // Edit modal show event
      $('#edit-note').on('show.bs.modal', function (event) {
          const button = $(event.relatedTarget);
          currentRowUpdate = $('#productsTable').DataTable().row(button.parents('tr'));

          // Get data from button attributes
          const productId = button.data('id');
          const productName = button.data('name');
          const productSku = button.data('sku');
          const productImage = button.data('thumbnail');
          const productCategoryId = button.data('categoryid');
          const productPrice = button.data('price');
          const productCostPrice = button.data('cost-price');
          const productQuantity = button.data('quantity');

          // Set values in modal fields
          const modal = $(this);
          modal.find('#productId').val(productId);
          modal.find('#productName').val(productName);
          modal.find('#productSku').val(productSku);
          modal.find('#productImage').attr('src', productImage);
          modal.find('#productCategory').val(productCategoryId);
          
          // Format currency values
          modal.find('#productPrice').val(formatCurrency(productPrice));
          modal.find('#productCostPrice').val(formatCurrency(productCostPrice));
          modal.find('#productQuantity').val(productQuantity);

          // Initialize currency inputs after setting values
          initializeCurrencyInputs();
      });

      // Handle form submission
      $('#editProductForm').on('submit', function (e) {
          e.preventDefault();
          const formData = new FormData(this);
          
          // Parse currency values before sending
          const price = parseCurrency(formData.get('price'));
          const costPrice = parseCurrency(formData.get('costPrice'));
          
          formData.set('price', price);
          formData.set('costPrice', costPrice);

          $.ajax({
              url: '/POS/Product/UpdateProduct',
              type: 'POST',
              data: formData,
              processData: false,
              contentType: false,
              success: function (response) {
                  if (response.success) {
                      $('#edit-note').modal('hide');
                      $('#productsTable').DataTable().ajax.reload();
                      Swal.fire({
                          icon: 'success',
                          title: 'Success',
                          text: response.message
                      });
                  } else {
                      Swal.fire({
                          icon: 'error',
                          title: 'Error',
                          text: response.message
                      });
                  }
              },
              error: function (xhr, status, error) {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: 'An error occurred while updating the product.'
                  });
              }
          });
      });
  </script>
}