@model IEnumerable<Web.Models.Product>
@{
    ViewData["Title"] = "Product List";
}

<style>
    th,
    td {
        border: 1px solid #ccc;
        padding: 10px;
        text-align: right;
    }

    #addProductImagePreview {
        width: 200px;
        height: 200px;
        margin-top: 10px;
    }

    #productImage {
        width: 200px;
        height: 200px;
        margin-top: 10px;
    }

    th {
        background-color: #f2f2f2;
    }

    table.dataTable th.dt-type-numeric,
    table.dataTable th.dt-type-date,
    table.dataTable td.dt-type-numeric,
    table.dataTable td.dt-type-date {
        text-align: center;
    }

    #addProductImagePreview {
        width: 200px;
        height: 200px;
        margin-top: 10px;
    }
</style>

<div class='container-fluid'>
    <div class='row'>
        <div class='col-lg-12'>
            <div class='d-flex flex-wrap flex-wrap align-items-center justify-content-between mb-4'>
                <div>
                    <h4 class='mb-3'>Product List</h4>
                </div>
                <button id="addProductButton" class='btn btn-primary add-list flex-shrink-0'>
                    <i class='las la-plus mr-3'></i>
                    Add Product
                </button>
            </div>
        </div>
        <!-- Add Product Section -->
        <div id="addProductSection" style="display: none;" class='container-fluid add-form-list'>
            <div class='row'>
                <div class='col-sm-6'>
                    <div class='card'>
                        <div class='card-header d-flex justify-content-between'>
                            <div class='header-title'>
                                <h4 class='card-title'>Add Product</h4>
                            </div>
                        </div>
                        <div class='card-body'>
                            <form id='addProductForm'>
                                <div class='row'>
                                    <div class='col-md-12'>
                                        <div class='form-group'>
                                            <label>Name *</label>
                                            <input type='text' id='productName' class='form-control' name='name'
                                                placeholder='Enter Name' data-errors='Please Enter Name.' required />
                                            <div class='help-block with-errors'></div>
                                        </div>
                                    </div>
                                    <div class='col-md-6'>
                                        <div class='form-group'>
                                            <label>Barcode *</label>
                                            <input type='text' id='productBarcode' class='form-control' name='barcode'
                                                placeholder='Enter Barcode' data-errors='Please Enter Barcode.' required />
                                            <div class='help-block with-errors'></div>
                                        </div>
                                    </div>
                                    <div class='col-md-6'>
                                        <div class='form-group'>
                                            <label>Category *</label>
                                            <select id='productCategoryAdd' name='categoryId' class='custom-select'
                                                data-style='py-0' required>
                                            </select>
                                        </div>
                                    </div>
                                    <div class='col-md-6'>
                                        <div class='form-group'>
                                            <label>Import Price *</label>
                                            <input type='text' id='productImportPrice' class='form-control currency-input'
                                                name='importPrice' placeholder='Enter Cost' data-errors='Please Enter Cost.'
                                                required />
                                            <div class='help-block with-errors'></div>
                                        </div>
                                    </div>
                                    <div class='col-md-6'>
                                        <div class='form-group'>
                                            <label>Retail Price *</label>
                                            <input type='text' id='productRetailPrice' name='retailPrice'
                                                class='form-control currency-input' placeholder='Enter Price'
                                                data-errors='Please Enter Price.' required />
                                            <div class='help-block with-errors'></div>
                                        </div>
                                    </div>
                                    <div class='col-md-12'>
                                        <div class='form-group'>
                                            <label>Quantity *</label>
                                            <input type='text' id='productQuantity' name='stockQuantity' class='form-control'
                                                placeholder='Enter Quantity' required />
                                            <div class='help-block with-errors'></div>
                                        </div>
                                    </div>
                                    <div class='col-md-12'>
                                        <div class='form-group'>
                                            <label>Image</label>
                                            <input type='file' class='form-control image-file' id='addProductImage' name='image'
                                                accept='image/*' required />
                                            <div class='image-preview'>
                                                <img class="d-none" alt='Product Image' id='addProductImagePreview' />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <button type='submit' class='btn btn-primary mr-2' id="addProductBtn">
                                    Add Product
                                </button>
                                <button id="resetAddProduct" type='reset' class='btn btn-danger'>Reset</button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class='card'>
                        <div class='card-header d-flex justify-content-between'>
                            <div class='header-title'>
                                <h4 class='card-title'>Category Management</h4>
                            </div>
                        </div>
                        <div class='card-body'>
                            <div class="mb-4">
                                <button id="showAddCategoryBtn" class="btn btn-primary mb-3">Add New Category</button>
                                <form id='addCategoryForm' style="display: none;">
                                    <div class='row'>
                                        <div class='col-md-8'>
                                            <div class='form-group'>
                                                <label>Category Name *</label>
                                                <input type='text' class='form-control' name='name' required />
                                            </div>
                                        </div>
                                        <div class='col-md-4'>
                                            <div class='form-group'>
                                                <label>&nbsp;</label>
                                                <div>
                                                    <button type='submit' class='btn btn-primary'>Save</button>
                                                    <button type='button' class='btn btn-secondary' id="cancelAddCategory">Cancel</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>

                            <div class="form-group">
                                <label>Select Category</label>
                                <div class="d-flex">
                                    <select id='categorySelect' class='custom-select'>
                                        <option value="">Select Category</option>
                                    </select>
                                    <button class="btn btn-warning ml-2" id="editCategoryBtn" style="display: none;">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-danger ml-2" id="deleteCategoryBtn" style="display: none;">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>

                            <form id='editCategoryForm' style="display: none;">
                                <div class='form-group'>
                                    <label>Edit Category Name *</label>
                                    <input type='text' class='form-control' name='name' required />
                                    <div class="mt-2">
                                        <button type='submit' class='btn btn-primary'>Save</button>
                                        <button type='button' class='btn btn-secondary' id="cancelEditCategory">Cancel</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Page end  -->
        </div>
        <div class='col-lg-12'>
            <div class='table-responsive rounded mb-3'>
                <table id="productsTable" class='data-table table mb-0 tbl-server-info'>
                    <thead class='bg-white text-uppercase'>
                        <tr class='ligth ligth-data'>
                            <th>Sku</th>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Retail Price</th>
                            <th>Import Price</th>
                            <th>Quantity</th>
                            <th>Create At</th>
                            <th>Updated At</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
    <!-- Page end  -->
</div>
<!-- Modal Edit -->
<div class='modal fade' id='edit-note' tabindex='-1' role='dialog' aria-hidden='true'>
    <div class='modal-dialog modal-dialog-centered' role='document'>
        <div class='modal-content'>
            <div class='modal-body'>
                <div class='popup text-left'>
                    <div class='media align-items-top justify-content-between'>
                        <h3 class='mb-3'>Edit Product</h3>
                        <div class='btn-cancel p-0' data-dismiss='modal'>
                            <i class='las la-times'></i>
                        </div>
                    </div>
                    <div class='content edit-notes'>
                        <div class='card card-transparent card-block card-stretch event-note mb-0'>
                            <form id='editProductForm'>
                                <div class='card-body px-0 bukmark'>
                                    <!-- ID sản phẩm (ẩn) -->
                                    <input type='hidden' id='productId' name='productId' />
                                    <!-- Tên sản phẩm -->
                                    <div class='form-group'>
                                        <label for='productName'>Product Name</label>
                                        <input name="name" type='text' id='productName' class='form-control'
                                            placeholder='Enter product name' />
                                    </div>
                                    <!-- Mã vạch -->
                                    <div class='form-group'>
                                        <label for='productSku'>Sku</label>
                                        <input disabled type='text' id='productSku' class='form-control'
                                            placeholder='Enter product sku' />
                                    </div>
                                    <!-- Ảnh sản phẩm -->
                                    <div class='form-group'>
                                        <label for='productImage'>Product Image</label>
                                        <input type='file' id='imageInput' accept='image/*' name="image" />
                                        <img class="mx-auto" id='productImage' alt='Hình ảnh đã tải lên' />
                                    </div>
                                    <!-- Danh mục -->
                                    <div class='form-group'>
                                        <label for='productCategory'>Category</label>
                                        <select name="categoryId" class="custom-select" id="productCategory">

                                        </select>
                                    </div>
                                    <!-- Giá bán -->
                                    <div class='form-group'>
                                        <label for='productPrice'>Price</label>
                                        <div class='input-group'>
                                            <input name="productPrice" type='text' id='productPrice'
                                                class='form-control currency-input format-number-input'
                                                placeholder='Enter product price'
                                                aria-describedby='basic-addon2'
                                                oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" />
                                        </div>
                                    </div>
                                    <!-- Giá nhập -->
                                    <div class='form-group'>
                                        <label for='productCostPrice'>Cost Price</label>
                                        <div class='input-group'>
                                            <input name="importPrice" type='text' id='productCostPrice'
                                                class='form-control currency-input'
                                                placeholder='Enter product cost price'
                                                aria-describedby='basic-addon2'
                                                oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" />
                                        </div>
                                    </div>
                                    <!-- Số lượng -->
                                    <div class='form-group'>
                                        <label for='productQuantity'>Quantity</label>
                                        <input name="stockQuantity" type='text' id='productQuantity'
                                            class='form-control' placeholder='Enter product quantity' />
                                    </div>

                                </div>
                            </form>
                            <div class='card-footer border-0'>
                                <div class='d-flex flex-wrap align-items-center justify-content-end'>
                                    <button type='button' class='btn btn-secondary mr-3' data-dismiss='modal'>
                                        Cancel
                                    </button>
                                    <button type='submit' class='btn btn-primary' id='saveProductChanges'>
                                        Save Changes
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
  <script>
      /*--------------------------------------------------------------------- 
          DataTable 
          -----------------------------------------------------------------------*/
      $('#productsTable').DataTable({
          processing: true,
          serverSide: false,
          order: [],
          lengthMenu: [10, 20, 30, 50],
          columnDefs: [{ className: 'dt-center', targets: '_all' }],
          ajax: {
              url: '/POS/Product/GetAllProducts',
              type: 'GET',
              dataSrc: 'data' // Specify that our data is in the 'data' property of the response
          },
          columns: [
              {
                  data: 'Sku',
                  sortable: false
              },
              {
                  data: null,
                  render: function (data) {
                      return `<div class='d-flex align-items-center'>
                          <img src="${data.Thumbnail}" class='img-fluid rounded avatar-50 mr-3' alt='image' />
                          <p class='mb-0'>${data.Name}</p>
                      </div>`
                  }
              },
              { data: 'Category.Name' },
              {
                  data: 'Price',
                  render: function (data) {
                      return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data)
                  }
              },
              {
                  data: 'CostPrice',
                  render: function (data) {
                      return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data)
                  }
              },
              { data: 'StockQuantity' },
              { 
                  data: 'CreatedAt',
                  render: function (data) {
                      return new Date(data).toLocaleString('en-GB', { timeZone: 'UTC' })
                  }
              },
              { 
                  data: 'UpdatedAt',
                  render: function (data) {
                      return new Date(data).toLocaleString('en-GB', { timeZone: 'UTC' })
                  }
              },
              {
                  data: 'Id',
                  sortable: false,
                  render: function (data, type, row) {
                      return `<div class='d-flex align-items-center justify-content-center list-action'>
                          <button class='badge bg-success mr-2 edit-product' data-toggle='modal' data-placement='top'
                              data-target='#edit-note' title='Edit' data-original-title='Edit'
                              data-id='${data}' data-name='${row.Name}' data-sku='${row.Sku}'
                              data-thumbnail='${row.Thumbnail}' data-categoryid='${row.CategoryId}'
                              data-price='${row.Price}' data-cost-price='${row.CostPrice}'
                              data-quantity='${row.StockQuantity}' href='#'>
                              <i class='ri-pencil-line mr-0'></i>
                          </button>
                          <button class='badge bg-warning mr-2 delete-product' data-name='${row.Name}' data-id='${data}' href='#'>
                              <i class='ri-delete-bin-line mr-0'></i>
                          </button>
                      </div>`
                  }
              }
          ]
      })

      const loadCategories = () => $.ajax({
          url: '/POS/Product/GetAllCategories',
          method: 'GET',
          success: function (response) {
              const categorySelectModal = $('#productCategory')
              const productCategoryAdd = $('#productCategoryAdd')
              const productSelect = $('#categorySelect')
              categorySelectModal.empty()
              productCategoryAdd.empty()
              productSelect.empty()
              productSelect.append(`<option value="">Select category</option>`)
              response.forEach(category => {
                  categorySelectModal.append(`<option value="${category._id}">${category.name}</option>`)
                  productCategoryAdd.append(`<option value="${category._id}">${category.name}</option>`)
                  productSelect.append(`<option value="${category._id}">${category.name}</option>`)
              })
          },
          error: function (error) {
              console.log(error)
          }
      })

      loadCategories()

      let currentRowUpdate = null
      /*--------------------------------------------------------------------- 
          edit-note 
          -----------------------------------------------------------------------*/
      $('#edit-note').on('show.bs.modal', function (event) {
          // Lấy nút mở modal
          const button = $(event.relatedTarget)
          currentRowUpdate = $('#productsTable').DataTable().row(button.parents('tr'))


          // Lấy dữ liệu từ các thuộc tính `data-*`
          const productId = button.data('id')
          const productName = button.data('name')
          const productSku = button.data('sku')
          const productImage = button.data('thumbnail')
          const productCategoryId = button.data('categoryid')
          const productPrice = formatNumber(button.data('price'))
          const productCostPrice = formatNumber(button.data('cost-price'))
          const productQuantity = formatNumber(button.data('quantity'))

          // Đặt dữ liệu vào các trường trong modal
          const modal = $(this)
          modal.find('#productId').val(productId)
          modal.find('#productName').val(productName)
          modal.find('#productSku').val(productSku)
          modal.find('#productImage').attr('src', productImage)
          modal.find('#productCategory').val(productCategoryId).change()
          modal.find('#productPrice').val(productPrice)
          modal.find('#productCostPrice').val(productCostPrice)
          modal.find('#productQuantity').val(productQuantity)
      })


      $('#addProductButton').click(function () {
          $('#addProductSection').toggle()
      })

      $('#resetAddProduct').click(function () {
          $('#addProductImagePreview').addClass('d-none')
      })

      let imagePreviewUpdate = null
      /*--------------------------------------------------------------------- 
          show-images 
          -----------------------------------------------------------------------*/
      $(document).on('change', '#imageInput', function (event) {
          const file = event.target.files[0] // Lấy file đầu tiên từ danh sách
          if (file) {
              const reader = new FileReader()
              reader.onload = function (e) {
                  const imagePreview = $('#productImage')
                  imagePreview.attr('src', e.target.result) // Thiết lập src của hình ảnh
                  imagePreview.show() // Hiển thị hình ảnh
                  imagePreviewUpdate = e.target.result
              }
              reader.readAsDataURL(file) // Đọc file dướidạng URL
          }
      })

      $(document).on('change', '#addProductImage', function (event) {
          const file = event.target.files[0] // Lấy file đầu tiên từ danh sách
          if (file) {
              const reader = new FileReader()
              reader.onload = function (e) {
                  const imagePreview = $('#addProductImagePreview')
                  imagePreview.attr('src', e.target.result) // Thiết lập src của hình ảnh
                  imagePreview.show() // Hiển thị hình ảnh
              }
              reader.readAsDataURL(file) // Đọc file dướidạng URL
          }
          $('#addProductImagePreview').removeClass('d-none')
      })

      /*--------------------------------------------------------------------- 
          update product 
          -----------------------------------------------------------------------*/
      $('#saveProductChanges').on('click', function (e) {
          e.preventDefault()
          const formData = new FormData($('#editProductForm')[0])
          const productId = formData.get('productId')
          const productName = formData.get('name')
          const productImage = formData.get('image')
          const productCategory = formData.get('categoryId')
          const productPrice = formData.get('productPrice')
          const productCostPrice = formData.get('importPrice')
          const productQuantity = formData.get('stockQuantity')

          const data = {
              name: productName,
              image: productImage,
              categoryId: productCategory,
              productPrice: currency(productPrice, { symbol: '', separator: '.', decimal: ',' }).value,
              importPrice: currency(productCostPrice, { symbol: '', separator: '.', decimal: ',' }).value,
              stockQuantity: currency(productQuantity, { symbol: '', separator: '.', decimal: ',' }).value
          }

          formData.set('data', JSON.stringify(data))

          $.ajax({
              url: `/products/${productId}`,
              type: 'PUT',
              data: formData,
              processData: false,
              contentType: false,
              beforeSend: () => {
                  $('#saveProductChanges').text('Updating...')
                  $('#saveProductChanges').prop('disabled', true)
              },
              success: (response) => {
                  Swal.fire({
                      icon: 'success',
                      title: 'Success',
                      text: 'Product updated successfully',
                      timer: 500
                  })
                  $('#edit-note').modal('hide')
                  currentRowUpdate.data(response).invalidate()
                  $('#productsTable').DataTable().one('draw', function() {
                      const rowNode = currentRowUpdate.node()
                      const imageElement = rowNode.querySelector('img')
                      imageElement.src = response.image
                  })
                  currentRowUpdate.draw(false)
              },
              error: (error) => {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: error.responseJSON.message || 'An error occurred',
                      showConfirmButton: true,
                  })
              },
              complete: () => {
                  $('#saveProductChanges').text('Save Changes')
                  $('#saveProductChanges').prop('disabled', false)
              }
          })
      })

      /*--------------------------------------------------------------------- 
          add product and upload image to server 
          -----------------------------------------------------------------------*/
      $('#addProductForm').on('submit', function (event) {
          event.preventDefault();
          
          // Disable submit button to prevent double submission
          $('#addProductBtn').prop('disabled', true);
          
          const formData = new FormData(this);
          
          $.ajax({
              url: '/POS/Product/AddProduct',
              type: 'POST',
              data: formData,
              processData: false,
              contentType: false,
              success: function (response) {
                  if (response.success) {
                      // Show success message
                      Swal.fire({
                          icon: 'success',
                          title: 'Success!',
                          text: response.message
                      }).then(() => {
                          // Reset form
                          $('#addProductForm')[0].reset();
                          
                          // Hide add product section
                          $('#addProductSection').hide();
                          
                          // Refresh product table
                          $('#productsTable').DataTable().ajax.reload();
                      });
                  } else {
                      Swal.fire({
                          icon: 'error',
                          title: 'Error!',
                          text: response.message
                      });
                  }
              },
              error: function (xhr, status, error) {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error!',
                      text: 'An error occurred while adding the product. Please try again.'
                  });
              },
              complete: function () {
                  // Re-enable submit button
                  $('#addProductBtn').prop('disabled', false);
              }
          });
      });

      $(document).on('click', '.delete-product', function () {
          const name = $(this).data('name')
          Swal.fire({
              title: `Are you sure you want to delete ${name}?`,
              text: 'You won\'t be able to revert this!',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, delete it!'
          }).then((result) => {
              if (result.isConfirmed) {
                  const productId = $(this).data('id')
                  $.ajax({
                      url: `/products/${productId}`,
                      type: 'DELETE',
                      success: (response) => {
                          $('#productsTable').DataTable().ajax.reload()
                      },
                      error: (error) => {
                          console.log(error)
                          Swal.fire({
                              icon: 'error',
                              title: 'Error',
                              text: error.responseJSON.message || 'An error occurred',
                              showConfirmButton: true
                          })
                      }
                  })
              }
          })
      })

      // Show/Hide Add Category Form
      $('#showAddCategoryBtn').click(function() {
          $('#addCategoryForm').slideDown();
          $(this).hide();
      });

      $('#cancelAddCategory').click(function() {
          $('#addCategoryForm').slideUp();
          $('#showAddCategoryBtn').show();
          $('#addCategoryForm')[0].reset();
      });

      // Add Category
      $('#addCategoryForm').on('submit', function(e) {
          e.preventDefault();
          const formData = new FormData(this);
          const categoryData = Object.fromEntries(formData.entries());

          $.ajax({
              url: '/categories',
              method: 'POST',
              contentType: 'application/json',
              data: JSON.stringify(categoryData),
              success: function(response) {
                  Toastify({
                      text: 'Category added successfully',
                      backgroundColor: 'green',
                      delay: 3000,
                      position: 'center'
                  }).showToast();
                  loadCategories();
                  $('#addCategoryForm')[0].reset();
                  $('#addCategoryForm').slideUp();
                  $('#showAddCategoryBtn').show();
              },
              error: function(err) {
                  Toastify({
                      text: err.responseJSON?.message || 'Failed to add category',
                      backgroundColor: 'red',
                      delay: 3000,
                      position: 'center'
                  }).showToast();
              }
          });
      });

      // Handle category selection
      $('#categorySelect').change(function() {
          const selectedId = $(this).val();
          const selectedName = $(this).find('option:selected').data('name');
          
          if (selectedId) {
              $('#editCategoryBtn, #deleteCategoryBtn').show();
              $('#editCategoryForm input[name="name"]').val(selectedName);
          } else {
              $('#editCategoryBtn, #deleteCategoryBtn').hide();
              $('#editCategoryForm').hide();
          }
      });

      // Show/Hide Edit Form
      $('#editCategoryBtn').click(function() {
          $('#editCategoryForm').slideDown();
      });

      $('#cancelEditCategory').click(function() {
          $('#editCategoryForm').slideUp();
      });

      // Edit Category
      $('#editCategoryForm').on('submit', function(e) {
          e.preventDefault();
          const categoryId = $('#categorySelect').val();
          const formData = new FormData(this);
          const categoryData = Object.fromEntries(formData.entries());

          $.ajax({
              url: `/categories/${categoryId}`,
              method: 'PUT',
              contentType: 'application/json',
              data: JSON.stringify(categoryData),
              success: function(response) {
                  Toastify({
                      text: 'Category updated successfully',
                      backgroundColor: 'green',
                      delay: 3000,
                      position: 'center'
                  }).showToast();
                  loadCategories();
                  $('#editCategoryForm').slideUp();
              },
              error: function(err) {
                  Toastify({
                      text: err.responseJSON?.message || 'Failed to update category',
                      backgroundColor: 'red',
                      delay: 3000,
                      position: 'center'
                  }).showToast();
              }
          });
      });

      // Delete Category
      $('#deleteCategoryBtn').click(function() {
          const categoryId = $('#categorySelect').val();
          const categoryName = $('#categorySelect option:selected').text();

          Swal.fire({
              title: `Delete Category "${categoryName}"?`,
              text: "You won't be able to revert this!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#d33',
              cancelButtonColor: '#3085d6',
              confirmButtonText: 'Yes, delete it!'
          }).then((result) => {
              if (result.isConfirmed) {
                  $.ajax({
                      url: `/categories/${categoryId}`,
                      method: 'DELETE',
                      success: function() {
                          Toastify({
                              text: 'Category deleted successfully',
                              backgroundColor: 'green',
                              delay: 3000,
                              position: 'center'
                          }).showToast();
                          loadCategories();
                          $('#editCategoryForm').hide();
                          $('#editCategoryBtn, #deleteCategoryBtn').hide();
                      },
                      error: function(err) {
                          Toastify({
                              text: err.responseJSON?.message || 'Failed to delete category',
                              backgroundColor: 'red',
                              delay: 3000,
                              position: 'center'
                          }).showToast();
                      }
                  });
              }
          });
      });

      const formatter = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
      });

      function formatUSD(number) {
          return formatter.format(number);
      }

      // Handle currency input fields
      function handleCurrencyInput(e) {
          // Get the input value and remove all non-numeric characters except decimal point
          let value = e.target.value.replace(/[^\d.]/g, '');
          
          // Ensure only one decimal point
          const decimalPoints = value.match(/\./g);
          if (decimalPoints && decimalPoints.length > 1) {
              value = value.replace(/\.(?=.*\.)/g, '');
          }

          // Limit to 2 decimal places
          if (value.includes('.')) {
              const parts = value.split('.');
              value = parts[0] + '.' + parts[1].slice(0, 2);
          }

          // Update the input value
          e.target.value = value;
      }

      // Apply currency formatting on blur
      function formatCurrencyOnBlur(e) {
          const value = e.target.value;
          if (value) {
              const number = parseFloat(value);
              if (!isNaN(number)) {
                  e.target.value = number.toFixed(2);
              }
          }
      }

      // Add event listeners to currency input fields
      document.querySelectorAll('.currency-input').forEach(input => {
          input.addEventListener('input', handleCurrencyInput);
          input.addEventListener('blur', formatCurrencyOnBlur);
      });

      // Format currency values in table cells
      function formatTableCurrencies() {
          document.querySelectorAll('.currency-cell').forEach(cell => {
              const value = parseFloat(cell.textContent);
              if (!isNaN(value)) {
                  cell.textContent = formatUSD(value);
              }
          });
      }
  </script>
}